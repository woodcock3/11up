"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("path");require("crypto"),require("fs/promises");var t=require("fs"),r=require("chalk");require("util/types"),require("debug");var s=require("zlib");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var n=a(r);const o=(...e)=>(...t)=>e.reduce(((e,t,r)=>0===r?t(...e):(e=>e instanceof Promise)(e)?e.then(t):t(e)),t),i=e=>null==e,l={type:()=>"$None",map:()=>l,fill:e=>c(e()),chain:()=>l,apply:()=>l,isNone:()=>!0,isSome:()=>!1,extract:()=>null,toJSON:()=>({type:"$None",value:null})},c=e=>({map:t=>u(t(e)),chain:t=>t(e),apply:t=>t.map((t=>t(e))),fill:()=>c(e),isNone:()=>!1,isSome:()=>!0,extract:()=>e,type:()=>"$Some",toJSON:()=>({type:"$Some",value:e})}),u=e=>(e=>!i(e))(e)?c(e):l,m=e=>(t,r)=>(...s)=>{const a=e(...s)?t(...s):null==r?void 0:r(...s);return i(r)?u(a):a},d=()=>{},p=()=>"production"===process.env.NODE_ENV,f=Promise.resolve.bind(Promise);Promise.reject.bind(Promise);const h=o(m((t=>""===e.extname(t)))((e=>e),e.dirname),m(t.existsSync)(o(f,d),o((e=>t.promises.mkdir(e,{recursive:!0})),d)));let g="";const v=(e,t,r)=>{return console.info(" "+n.default.black.bgYellowBright((new Date).toLocaleTimeString())+" -> "+n.default.bold.gray(g)+": "+e(t instanceof Error?(s=t).name+": "+s.message+"\n"+s.stack:t)+" "+r);var s},y=e=>v(n.default.red,e,"ðŸ’¥");n.default.bold;const b=(e,t)=>{const r=[];let s=null;for(;null!==(s=t.exec(e));)r.push(s[1]);return r},P=async r=>({data:await t.promises.readFile(e.resolve(r),{encoding:"utf-8"}).catch((e=>(y(e),""))),url:r}),w=({data:e,url:r})=>t.promises.writeFile(r,e,{encoding:"utf-8"}),_=e=>"."===e.charAt(0),L=/<link\s+[^>]*href="([^"]+\.css)"[^>]*>/g,S=/<script\s+[^>]*src="([^"]+\.js)"[^>]*>/g,q={gzip:(e,t)=>new Promise(((t,r)=>s.gzip(e,{level:s.constants.Z_MAX_LEVEL},((e,s)=>e?r(e):t(s))))).then((e=>({data:e,url:t+".gz"}))),brotli:(e,t)=>new Promise(((t,r)=>s.brotliCompress(e,{params:{[s.constants.BROTLI_PARAM_QUALITY]:s.constants.BROTLI_MAX_QUALITY}},((e,s)=>e?r(e):t(s))))).then((e=>({data:e,url:t+".br"}))),deflate:(e,t)=>new Promise(((t,r)=>s.deflate(e,{level:s.constants.Z_MAX_LEVEL},((e,s)=>e?r(e):t(s))))).then((e=>({data:e,url:t+".deflate"})))},A=async(t,r,s,a)=>{const o="string"==typeof s?[s]:s,i=[Promise.resolve({data:t,url:r})].concat(b(t,L).map((t=>P(e.join(_(t)?e.dirname(r):a,t))))).concat(b(t,S).map((t=>P(e.join(_(t)?e.dirname(r):a,t)))));await Promise.all(o.map((e=>{const t=q[e];return Promise.all(i.map((e=>e.then((({data:e,url:r})=>{var s;s=`Start to compress "${r}" file`,v(n.default.green,s,"ðŸ†™"),h(r).then((()=>t(e,r))).then(w).then((()=>(e=>v(n.default.magenta,e,"ðŸ™Œ"))(`"${r}" file was successfully compressed and written to disk`)),y)})))))})))};let N;g="Icons";exports.compress=(t,{enabled:r=p(),algorithm:s="brotli"}={})=>{r&&t.addTransform("compress",(async(t,r)=>(r.endsWith("html")&&(N??=r.split(e.sep)[0],await A(t,r,s,N)),t)))};
//# sourceMappingURL=index.js.map
