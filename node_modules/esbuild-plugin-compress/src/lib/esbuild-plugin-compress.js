"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.compress = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const zlib_1 = require("zlib");
const writeOriginFiles = (path, contents) => {
    fs_extra_1.default.writeFileSync(path, contents);
};
const writeGzipCompress = (path, contents, options = {}) => {
    const gzipped = (0, zlib_1.gzipSync)(contents, options);
    fs_extra_1.default.writeFileSync(`${path}.gz`, gzipped);
};
const writeBrotliCompress = (path, contents, options = {}) => {
    const gzipped = (0, zlib_1.brotliCompressSync)(contents, options);
    fs_extra_1.default.writeFileSync(`${path}.br`, gzipped);
};
const compress = (options = {}) => {
    var _a, _b, _c, _d, _e, _f;
    const gzip = (_a = options.gzip) !== null && _a !== void 0 ? _a : true;
    const brotli = (_b = options.brotli) !== null && _b !== void 0 ? _b : true;
    const removeOrigin = (_c = options.removeOrigin) !== null && _c !== void 0 ? _c : false;
    const gzipOpts = (_d = options.gzipOptions) !== null && _d !== void 0 ? _d : {};
    const brotliOpts = (_e = options.brotliOptions) !== null && _e !== void 0 ? _e : {};
    const noCompressSpecified = !gzip && !brotli;
    let outputDir = (_f = options.outputDir) !== null && _f !== void 0 ? _f : null;
    return {
        name: 'plugin:compress',
        setup({ initialOptions: { outfile, outdir, write }, onEnd }) {
            if (write) {
                console.log(chalk_1.default.yellow('WARN'), ' Set write option as true to use compress plugin.');
                return;
            }
            if (outputDir && !outdir && !outfile) {
                console.log(chalk_1.default.yellow('WARN'), ' When using outputDir option, outdir or outfile must be specified.');
            }
            else if (outputDir && outfile) {
                outputDir = path_1.default.resolve(path_1.default.dirname(outfile), outputDir);
            }
            else if (outputDir && outdir) {
                outputDir = path_1.default.resolve(outdir, outputDir);
            }
            onEnd(async ({ outputFiles }) => {
                for (const { path: originOutputPath, contents } of outputFiles) {
                    const writrPath = outputDir
                        ? path_1.default.resolve(outputDir, path_1.default.basename(originOutputPath))
                        : originOutputPath;
                    if (!contents) {
                        return;
                    }
                    if (noCompressSpecified) {
                        console.log(chalk_1.default.yellow('WARN'), ' Set at least one compression as true to use compress plugin.');
                    }
                    else {
                        fs_extra_1.default.ensureDirSync(path_1.default.dirname(writrPath));
                    }
                    gzip ? writeGzipCompress(writrPath, contents, gzipOpts) : void 0;
                    brotli
                        ? writeBrotliCompress(writrPath, contents, brotliOpts)
                        : void 0;
                    if (!removeOrigin || noCompressSpecified) {
                        writeOriginFiles(originOutputPath, contents);
                    }
                }
            });
        },
    };
};
exports.compress = compress;
