function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import createElement from './createElement';
/**
 * Get the attributes of an HTML element.
 * @param {HTMLElement} element
 * @returns {Object}
 */

export var getAttrs = function getAttrs(element) {
  return Array.from(element.attributes).reduce(function (attrs, attr) {
    attrs[attr.name] = attr.value;
    return attrs;
  }, {});
};
/**
 * Gets the classNames of an attributes Object.
 * @param {Object} attrs
 * @returns {Array}
 */

export var getClassNames = function getClassNames(attrs) {
  if (typeof attrs === 'string') return attrs;
  if (!attrs || !attrs["class"]) return '';

  if (attrs["class"] && typeof attrs["class"] === 'string') {
    return attrs["class"].split(' ');
  }

  if (attrs["class"] && Array.isArray(attrs["class"])) {
    return attrs["class"];
  }

  return '';
};
/**
 * Combines the classNames of array of classNames to a String
 * @param {array} arrayOfClassnames
 * @returns {string}
 */

export var combineClassNames = function combineClassNames(arrayOfClassnames) {
  var classNameArray = arrayOfClassnames.flatMap(getClassNames);
  return classNameArray.map(function (classItem) {
    return classItem.trim();
  }).filter(Boolean).filter(function (value, index, self) {
    return self.indexOf(value) === index;
  }).join(' ');
};

var toPascalCase = function toPascalCase(string) {
  return string.replace(/(\w)(\w*)(_|-|\s*)/g, function (g0, g1, g2) {
    return g1.toUpperCase() + g2.toLowerCase();
  });
};
/**
 * ReplaceElement, replaces the given element with the created icon.
 * @param {HTMLElement} element
 * @param {{ nameAttr: string, icons: object, attrs: object }} options: { nameAttr, icons, attrs }
 * @returns {Function}
 */


export default (function (element, _ref) {
  var nameAttr = _ref.nameAttr,
      icons = _ref.icons,
      attrs = _ref.attrs;
  var iconName = element.getAttribute(nameAttr);
  var ComponentName = toPascalCase(iconName);
  var iconNode = icons[ComponentName];

  if (!iconNode) {
    return console.warn(element.outerHTML + " icon name was not found in the provided icons object.");
  }

  var elementAttrs = getAttrs(element);
  var tag = iconNode[0],
      iconAttributes = iconNode[1],
      children = iconNode[2];

  var iconAttrs = _extends({}, iconAttributes, {
    'icon-name': iconName
  }, attrs, elementAttrs);

  var classNames = combineClassNames(['lucide', "lucide-" + iconName, elementAttrs, attrs]);

  if (classNames) {
    iconAttrs["class"] = classNames;
  }

  var svgElement = createElement([tag, iconAttrs, children]);
  return element.parentNode.replaceChild(svgElement, element);
});